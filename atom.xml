<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://likasi777.github.io/</id>
    <title>likasi777_blog</title>
    <updated>2021-08-26T16:15:18.430Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://likasi777.github.io/"/>
    <link rel="self" href="https://likasi777.github.io/atom.xml"/>
    <logo>https://likasi777.github.io/images/avatar.png</logo>
    <icon>https://likasi777.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, likasi777_blog</rights>
    <entry>
        <title type="html"><![CDATA[Java注解和反射学习笔记]]></title>
        <id>https://likasi777.github.io/post/java注解反射/</id>
        <link href="https://likasi777.github.io/post/java注解反射/">
        </link>
        <updated>2021-08-26T14:21:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="java注解和反射学习笔记">Java注解和反射学习笔记</h1>
<h2 id="1什么是注解">1.什么是注解</h2>
<ul>
<li>Annotation是从JDK5.0开始引入的新技术</li>
<li>作用：可以被其他程序（比如编译器等）读取</li>
<li>格式：@注释名，还可以添加一些参数值</li>
</ul>
<h4 id="内置注解">内置注解：</h4>
<p>@Override 重写</p>
<p>@Deprecated 不推荐使用，但是可以使用，或者存在更好的方式</p>
<p>@SuppressWarning 镇压警告  @SuppressWarning(&quot;all&quot;)镇压所有警告</p>
<h4 id="元注解">元注解：</h4>
<p>作用就是负责注解其他注解</p>
<p>@Target:表示注解的使用范围，可以用在哪些地方</p>
<pre><code class="language-java">//测试元注解
@MyAnnotation
public class Test01 {
    @MyAnnotation
    public void test(){

    }
}

//定义一个注解
//Target表示我们的注解可以用在哪些地方
@Target(value ={ElementType.METHOD,ElementType.TYPE})
</code></pre>
<p>@Retention（保留的意思）:表示注解的生命周期，在什么地方还有效, <strong>runtime&gt;class&gt;source</strong></p>
<pre><code class="language-java">//Retention表示我们的注解在什么地方还有效 runtime&gt;class&gt;source
@Retention(value = RetentionPolicy.RUNTIME)
</code></pre>
<p>@Documentted:表示是否将我们注解生成在javadoc中</p>
<pre><code class="language-java">//Documented表示是否将我们的注解生成在javadoc中
@Documented
</code></pre>
<p>@Inherited:表示子类可继续父类的注解</p>
<pre><code class="language-java">//Inherited表示子类可继承父类的注解
@Inherited
</code></pre>
<h4 id="自定义注解">自定义注解：</h4>
<p>使用@interface自定义注解</p>
<pre><code class="language-java">//自定义注解
public class Test02 {
    //注解可以显示赋值，如果没有默认值，就必须为其赋值
    @MyAnnotation1()
    public void test1(){}
    @MyAnnotation3(&quot;侬好&quot;)//当自定义注解里面只有一个参数，并且是value时才可以直接写
    public void test2(){}
}

@Target({ElementType.TYPE,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnnotation1{
    //注解的参数：参数类型+参数名（）；
    String name() default &quot;&quot;;
    int age() default 18;
    int id() default -1;//如果默认值为-1代表不存在
    String[] shcool() default {&quot;清华大学&quot;};
}
@Target({ElementType.TYPE,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnnotation3{
    String value();
}
</code></pre>
<h2 id="2什么是反射">2.什么是反射</h2>
<blockquote>
<p>动态语言：<strong>运行时可以改变其结构的语言</strong>，比如JavaScript，php，python</p>
<p>静态语言：运行时结构不可改变，比如java，c，c++</p>
</blockquote>
<h4 id="概念">概念：</h4>
<ul>
<li>
<p>Reflection(反射)是java语言被视为动态语言的关键，<strong>反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</strong>。</p>
</li>
<li>
<p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构，这就是反射。</p>
</li>
</ul>
<h4 id="优点">优点：</h4>
<p>实现动态创建对象和编译，灵活性</p>
<h4 id="缺点">缺点：</h4>
<p>对性能有影响，使用<strong>反射基本上是一种解释操作</strong>，我们告诉JVM，我们希望做什么并且它满足我们的需求，比直接执行相同的操作慢。</p>
<h4 id="反射相关的主要api">反射相关的主要API：</h4>
<p>java.lang.Class:代表一个类</p>
<p>java.lang.reflect.Method:代表类的方法</p>
<p>java.lang.reflect.Field:代表类的成员变量</p>
<p>java.lang.reflect.Constructor:代表类的构造器</p>
<h4 id="class类">Class类：</h4>
<p>Class类是Reflection的根源，针对任何你想动态加载、运行的类，要先获得相应的Class对象。</p>
<h4 id="获取class类的实例">获取Class类的实例：</h4>
<ol>
<li>通过对象获取（getClass）</li>
<li>通过类名获取</li>
<li>通过类名.class获取</li>
</ol>
<pre><code class="language-java">package test;
//测试Class类的创建方式有哪些
public class Test04 {
    public static void main(String[] args) throws ClassNotFoundException {
        Person person=new Student();
        System.out.println(&quot;这个人是&quot;+person.name);
        //方式一，通过对象获得
        Class c1=person.getClass();
        System.out.println(c1.hashCode());
        //方式二，通过forname获得
        Class c2=Class.forName(&quot;test.Student&quot;);
        System.out.println(c2.hashCode());
        //方式三，通过类名.class
        Class c3=Student.class;

        //获得父类类型
        Class c4= c1.getSuperclass();
        System.out.println(c4);
    }
}
class Person{
    public String name;

    public Person() {
    }

    public Person(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return &quot;Person{&quot; +
                &quot;name='&quot; + name + '\'' +
                '}';
    }
}

class Student extends Person{
    public Student(){
        this.name=&quot;学生&quot;;
    }
}

class Teacher extends Person{
    public Teacher(){
        this.name=&quot;老师&quot;;
    }
}
</code></pre>
<h4 id="哪些类型可以有class对象">哪些类型可以有Class对象？</h4>
<p>class：外部类，成员，局部内部类，匿名内部类</p>
<p>interface：接口</p>
<p>[]：数组</p>
<p>enum：枚举</p>
<p>annotation：注解</p>
<p>基本数据类型</p>
<p>void</p>
<h4 id="java内存分析">java内存分析</h4>
<p>java内存：</p>
<ul>
<li>堆内存：
<ul>
<li>存放new的对象和数组</li>
<li>可以被所有的线程共享，不会存放别的对象引用</li>
</ul>
</li>
<li>栈内存
<ul>
<li>存放基本变量类型（会包括这个基本类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区
<ul>
<li>可以被所有的线程共享</li>
<li>包含了所有的class和static变量</li>
</ul>
</li>
</ul>
<h4 id="类的加载与classloader的理解">类的加载与ClassLoader的理解</h4>
<p>加载：</p>
<p>链接：</p>
<p>初始化：</p>
<h4 id="什么时候会发生类初始化">什么时候会发生类初始化？</h4>
<p>类的主动引用：一定会发生类的初始化</p>
<ul>
<li>虚拟机启动，先初始化main方法所在的类</li>
<li>new一个类的对象</li>
<li>调用类的静态成员和静态方法</li>
<li>使用java.lang.reflect包的方法对类进行反射调用</li>
<li>当初始化一个类时，其父类没有被初始化，则会先初始化它的父类</li>
</ul>
<p>类的被动引用：不会发生类的初始化</p>
<ul>
<li>当访问静态域时，只有真正声明这个域的类才会被初始化，例如：当子类引用父类的静态变量，不会导致子类初始化</li>
<li>通过数组定义类引用，不会触发此类的初始化</li>
<li>引用常量不会触发此类的初始化（常量和静态变量在连接阶段就存入调用类的常量池中了）</li>
</ul>
<h4 id="类加载器">类加载器</h4>
<p>概念：类加载器作用是用来把类(class)装载进内存的，有引导类加载器，扩展类加载器，系统类加载器</p>
<h4 id="获取运行时类的完整结构">获取运行时类的完整结构</h4>
<pre><code class="language-java">package test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Test06 {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {
        Class c1 = Class.forName(&quot;test.User&quot;);

        //获取类名
        System.out.println(c1.getName());//类名+包名
        System.out.println(c1.getSimpleName());
        //获得类的属性
        Field[] fields = c1.getFields();//只能找到public属性

        fields = c1.getDeclaredFields();//获得全部属性
        for (Field field : fields) {
            System.out.println(field);
        }
        //获得类的指定属性
        Field age = c1.getDeclaredField(&quot;age&quot;);
        System.out.println(age);

        //获得类的方法
        c1.getMethods();//获取本类及其父类的所有的方法
        c1.getDeclaredMethods();//获得本类所有的方法

        //获得指定的方法
        //因为java重载，所以还要指定类型，不然识别不了是哪个方法
        Method getName = c1.getMethod(&quot;getName&quot;, null);
        Method setName = c1.getMethod(&quot;setName&quot;, String.class);

        //获得构造器
        c1.getConstructors();//获得public的构造器
        c1.getDeclaredConstructors();
        
        //获得指定的构造器
        c1.getConstructor(String.class,int.class,int.class);
    }
}
</code></pre>
<h4 id="有了class对象能做什么">有了Class对象，能做什么？</h4>
<ul>
<li>通过反射创建对象
<ul>
<li>newInstance    //本质是调用了类的无参构造器</li>
<li>通过构造器创建对象  //调用了有参构造方法</li>
</ul>
</li>
<li>通过反射调用普通方法   //getDeclaredMethod   //invoke(对象,&quot;方法的值&quot;)</li>
<li>通过反射操作属性    //getDeclaredField</li>
</ul>
<pre><code class="language-java">package test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

//通过反射动态创建对象
public class Test07 {
    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {
        //获得Class对象
        Class c1 = Class.forName(&quot;test.User&quot;);

        //构造一个对象
        //本质是调用了类的无参构造器
        User user = (User) c1.newInstance();

        //通过构造器创建对象
        // 调用了有参构造方法
        Constructor constructor = c1.getDeclaredConstructor(String.class, int.class, int.class);
        User user1 = (User) constructor.newInstance(&quot;大白&quot;, 18, 001);
        System.out.println(user1);

        //通过反射调用普通方法
        //invoke(对象,&quot;方法的值&quot;)
        User user2 = (User) c1.newInstance();
        Method setName= c1.getDeclaredMethod(&quot;setName&quot;, String.class);
        setName.invoke(user2,&quot;反射&quot;);
        System.out.println(user2.getName());

        //通过反射操作属性
        User user3 = (User) c1.newInstance();
        Field name = c1.getDeclaredField(&quot;name&quot;);
        //不能直接操作私有属性，我们需要关闭程序的安全检测
        name.setAccessible(true);
        name.set(user3,&quot;反射操作属性&quot;);
        System.out.println(user3.getName());
    }
}
</code></pre>
<h4 id="性能检测">性能检测：</h4>
<pre><code class="language-java">package test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

//分析性能
public class Test08 {
    public static void test01(){
        //普通方式调用
        User user=new User();
        long start=System.currentTimeMillis();

        for (int i = 0; i &lt; 1000; i++) {
            user.getName();
        }

        long end=System.currentTimeMillis();
        System.out.println(&quot;普通方式执行时间:&quot;+(end-start));
    }

    //反射方式调用
    public static void test02() throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
        //普通方式调用
        Class c1= Class.forName(&quot;test.User&quot;);
        User user= (User) c1.newInstance();
        long start=System.currentTimeMillis();
        Method getName= c1.getDeclaredMethod(&quot;getName&quot;);
        for (int i = 0; i &lt; 1000; i++) {
           getName.invoke(user,null);
        }

        long end=System.currentTimeMillis();
        System.out.println(&quot;反射执行时间:&quot;+(end-start));
    }

    //反射调用，关闭检测
    public static void test03() throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
        //普通方式调用
        Class c1= Class.forName(&quot;test.User&quot;);
        User user= (User) c1.newInstance();
        long start=System.currentTimeMillis();
        Method getName= c1.getDeclaredMethod(&quot;getName&quot;);
        getName.setAccessible(true);
        for (int i = 0; i &lt; 100000000; i++) {
            getName.invoke(user,null);
        }

        long end=System.currentTimeMillis();
        System.out.println(&quot;反射执行(关闭检测)时间:&quot;+(end-start));
    }

    public static void main(String[] args) throws ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException {
        test01();
        test02();
        test03();
    }

}
</code></pre>
<h4 id="反射读取注解">反射读取注解</h4>
<pre><code class="language-java">package test;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

//反射操作注解
public class Test10 {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException {
      Class c1=Class.forName(&quot;test.Student1&quot;);
      //通过反射获取注解
      c1.getAnnotations();

      //获取注解的value值
        Table table= (Table) c1.getAnnotation(Table.class);
        String value= table.value();
        System.out.println(value);

        //获得类指定的注解
       java.lang.reflect.Field f= c1.getDeclaredField(&quot;name&quot;);
        Field annotation = f.getAnnotation(Field.class);
        annotation.columnName();
        annotation.type();
        annotation.length();

    }
}


@Table(&quot;db_stydent&quot;)
class Student1{
    @Field(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)
    private int id;
    @Field(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)
    private int age;
    @Field(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 10)
    private String name;

    public Student1() {
    }

    public Student1(int id, int age, String name) {
        this.id = id;
        this.age = age;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

//类名的注解
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@interface Table{
    String value();
}

//属性的注解
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@interface Field{
    String columnName();
    String type();
    int length();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Fern WIFI Cracker简单使用]]></title>
        <id>https://likasi777.github.io/post/fern-wifi-cracker-jian-dan-shi-yong/</id>
        <link href="https://likasi777.github.io/post/fern-wifi-cracker-jian-dan-shi-yong/">
        </link>
        <updated>2021-07-20T14:32:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="fern-wifi-cracker简单使用">Fern WIFI Cracker简单使用</h1>
<blockquote>
<p>简介：使用kali自带的fern wifi cracker利用字典破解弱密码的WIFI。</p>
<p>优点：可以自定义虚拟MAC地址，以便隐藏真实的MAC地址。图形界面操作简单。</p>
<p>缺点：强制断开用户时候有时要要求用户连接多次（容易造成用户警惕），而且破解成功与否主要靠的就是字典。</p>
</blockquote>
<h3 id="前言">前言：</h3>
<ul>
<li>由于当时手机没有流量，周围的wifi万能钥匙有破解不了，所以当时就想着能不能用kali破解wifi，然后去网上看了有关的帖子，然后后淘宝买了一个可以监听的无线网卡。用系统自带的字典试了几次后，发现字典不行，于是网上随便下个了字典，刚好运气好，遇到弱密码，破解成功。</li>
</ul>
<h3 id="步骤">步骤：</h3>
<ul>
<li>
<p>需要一个可以监听的网卡，电脑没有的话淘宝可以买一个（不贵，二三十块）。</p>
</li>
<li>
<p>在kali里面打开fern wifi cracker，它是一个图形界面的工具。</p>
</li>
<li>
<p>选择网卡（即我们插入的网卡）。</p>
</li>
<li>
<p>在ToolBox中，WIFI Attack Options设置虚拟MAC地址。</p>
</li>
<li>
<p>Scan for Access ponits，然后点开WPA，选择目标WiFi，点击Browse选择字典文件，Attack开始破解。</p>
</li>
<li>
<p>字典路径：/usr/share/fern-WIFI-cracker/extras/wordlists/common.txt（破解成功与否主要靠的就是字典）。</p>
</li>
</ul>
<h3 id="截图">截图：</h3>
<p>​ 打开fern wifi  cracker操作界面</p>
<ul>
<li><img src="https://gitee.com/likasi/img/raw/master/img/wifi1.png" alt="" loading="lazy"></li>
</ul>
<p>破解成功，并且经测试连接成功</p>
<ul>
<li><img src="https://gitee.com/likasi/img/raw/master/img/wifi2.png" alt="" loading="lazy"></li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/likasi/img/raw/master/img/wifi3.png" alt="" loading="lazy"></figure>
<h3 id="总结">总结：</h3>
<ul>
<li>fern wifi cracker是一个图形界面的工具，操作简单，破解成功与否跟字典有直接关系，需要有一个很全而且又好的字典，还要目标wifi密码强度不高破解成功的几率才打。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github+gridea搭建个人博客]]></title>
        <id>https://likasi777.github.io/post/githubgridea-da-jian-ge-ren-bo-ke/</id>
        <link href="https://likasi777.github.io/post/githubgridea-da-jian-ge-ren-bo-ke/">
        </link>
        <updated>2021-07-13T13:34:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="githubgridea搭建个人博客">github+gridea搭建个人博客</h1>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/likasi/img/raw/master/img/gridea.png" alt="" loading="lazy"></figure>
<h2 id="简介">简介</h2>
<p>用github、gridea搭建个人博客，以及用gitee、picgo搭建图床。</p>
<h2 id="搭建个人博客">搭建个人博客</h2>
<h3 id="github">GitHub</h3>
<p>1.创建GitHub账号，https://githu.com 每个GitHub账号有一个免费的GitHub pages。</p>
<p>2.创建仓库，仓库名称为固定格式：xxx.github.io</p>
<p>3.创建完仓库，点击设置，找到GitHub pages ，找到Your site is published at https://xxx.github.io</p>
<p>4.创建token，在设置里面找到个人设置，再找到开发者设置，找到最后的personal access tokens——&gt;generate new token ——&gt;填写note——&gt;勾选repo——&gt;generate token，复制这个token待会gridea里面用到。</p>
<h3 id="gridea">Gridea</h3>
<p>1.下载安装：https://gridea.dev ，如果没有看到默认的两篇文章，重新安装。</p>
<p>2.配置相关信息：找到远程，选择GitHub pages</p>
<ul>
<li>
<p>域名：xxx.github.io/</p>
</li>
<li>
<p>仓库名称：xxx.github.io</p>
</li>
<li>
<p>分支：main</p>
</li>
<li>
<p>仓库用户名：xxx</p>
</li>
<li>
<p>邮箱：注册github的邮箱</p>
</li>
<li>
<p>令牌：刚刚github创建token时保存的token</p>
</li>
<li>
<p>CNAME：可填可不填</p>
</li>
<li>
<p>先点击保存，再点击检测远程连接，可以先点预览在本地看看，然后点击同步（如果同步失败的话，翻下墙再同步就好了）。</p>
</li>
</ul>
<p>3.其他配置：点击主题可以修改主题、网站名称、网页图标、头像配置等等的。</p>
<h3 id="gitalk">Gitalk</h3>
<p>1.开启gitalk评论系统，在https://github.com/settings/applications/new注册应用。</p>
<ol start="2">
<li></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Application name</th>
<th style="text-align:left">Gridea_gitalk（自定义）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Homepage URL</td>
<td style="text-align:left">https://cyberlisa.github.io/</td>
</tr>
<tr>
<td style="text-align:left">Application description</td>
<td style="text-align:left">可不填</td>
</tr>
<tr>
<td style="text-align:left">Authorization callback URL</td>
<td style="text-align:left">https://cyberlisa.github.io/</td>
</tr>
</tbody>
</table>
<p>填写后点击【Register application】，会得到【Client ID】和【Client Secret】。</p>
<p>打开Gridea客户端——&gt;配置——&gt;评论配置——&gt;Platform（选中Gitalk）——&gt;开启按钮——&gt;</p>
<table>
<thead>
<tr>
<th style="text-align:left">Client ID</th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Client Secret</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">仓库</td>
<td style="text-align:left">Cyberlisa.github.io</td>
</tr>
<tr>
<td style="text-align:left">Owner</td>
<td style="text-align:left">Cyberlisa</td>
</tr>
</tbody>
</table>
<p>填完后点击【保存】——&gt;【同步】。</p>
<p>稍等一会儿后，在浏览器打开域名，会看到文章底下显示“未找到相关的issues进行评论xxx”，点击【使用GitHub登陆】，进行授权。</p>
<h2 id="搭建图床">搭建图床</h2>
<h2 id="gitee">gitee</h2>
<p>1.注册gitee账号，https://gitee.com</p>
<p>2.创建仓库。</p>
<p>3.创建token，复制下来。</p>
<h2 id="picgo">picgo</h2>
<p>1.下载picgo，github下载慢的话，可以去网上找别人分享的（注意不要下到捆绑软件）。</p>
<p>2.安装node.js，网上有很多教程https://www.runoob.com/nodejs/nodejs-install-setup.html</p>
<p>3.打开picgo,  在插件设置中搜索gitee， 选择gitee-uploder安装。</p>
<p>4.安装插件后再图床设置中找到gitee， 填写gitee设置</p>
<ul>
<li>repo：gitee的用户名/仓库名</li>
<li>branch：master</li>
<li>token：刚刚gitee创建的token</li>
<li>path：仓库下的文件夹</li>
<li>如果没有的话会自动创建</li>
<li>custormPath：随便选</li>
<li>custormUrl：可填可不填</li>
</ul>
<p>5.点击确定，会提示成功，然后在上传区点击上传图片，然后去gitee看看有没有成功。</p>
<p>6.其他设置：打开picgo设置，可选择显示的图床，把不用的取消打钩，以及修改上传快捷键。</p>
]]></content>
    </entry>
</feed>